
SudokuSolver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005f4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000052  00800060  000005f4  00000688  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000204  008000b2  008000b2  000006da  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006da  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000070c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000748  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007b8  00000000  00000000  00000790  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000615  00000000  00000000  00000f48  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000410  00000000  00000000  0000155d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000074  00000000  00000000  00001970  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003aa  00000000  00000000  000019e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000008d  00000000  00000000  00001d8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00001e1b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 9a 01 	jmp	0x334	; 0x334 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 b4 01 	jmp	0x368	; 0x368 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__vector_19>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ef       	ldi	r30, 0xF4	; 244
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 3b       	cpi	r26, 0xB2	; 178
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	22 e0       	ldi	r18, 0x02	; 2
  78:	a2 eb       	ldi	r26, 0xB2	; 178
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 3b       	cpi	r26, 0xB6	; 182
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 54 00 	call	0xa8	; 0xa8 <main>
  8a:	0c 94 f8 02 	jmp	0x5f0	; 0x5f0 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <initUART>:
	}
}

void initUART()
{
	UCSRC = (1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0); // Use 8-bit character sizes
  92:	86 e8       	ldi	r24, 0x86	; 134
  94:	80 bd       	out	0x20, r24	; 32
	// Load upper 8-bits of the baud rate value into the high byte of the UBRR register
	UBRRH = BAUD_PRESCALE>>8;
  96:	10 bc       	out	0x20, r1	; 32
	// Load lower 8-bits of the baud rate value into the low byte of the UBRR register
	UBRRL = BAUD_PRESCALE;
  98:	80 e4       	ldi	r24, 0x40	; 64
  9a:	89 b9       	out	0x09, r24	; 9
	UCSRB |= (1<<RXCIE)|(1<<TXCIE); // Enable the USART RXC and TXC interrupts
  9c:	8a b1       	in	r24, 0x0a	; 10
  9e:	80 6c       	ori	r24, 0xC0	; 192
  a0:	8a b9       	out	0x0a, r24	; 10
	UCSRB = (1<<RXEN)|(1<<TXEN); // Enable reception and transmission circuitry
  a2:	88 e1       	ldi	r24, 0x18	; 24
  a4:	8a b9       	out	0x0a, r24	; 10
  a6:	08 95       	ret

000000a8 <main>:
void initUART();

int main(void)
{
	// Setup stack
	SPL = RAMEND;
  a8:	8f e5       	ldi	r24, 0x5F	; 95
  aa:	8d bf       	out	0x3d, r24	; 61
#ifdef SPH
	SPH = RAMEND>>8;
  ac:	84 e0       	ldi	r24, 0x04	; 4
  ae:	8e bf       	out	0x3e, r24	; 62
#endif
	// Port settings
	pLedDdr = 0xFF; // set PORTA as output
  b0:	9f ef       	ldi	r25, 0xFF	; 255
  b2:	9a bb       	out	0x1a, r25	; 26
	pLedOut = 0xFF; // LEDs off
  b4:	9b bb       	out	0x1b, r25	; 27

	// Timer settings
	TCCR0 = (1<<CS02); ; // presc val. 256
  b6:	83 bf       	out	0x33, r24	; 51
	OCR0 = cMaxCnt; // max tim/cnt0 value 150
  b8:	86 e9       	ldi	r24, 0x96	; 150
  ba:	8c bf       	out	0x3c, r24	; 60
	TIMSK |= (1<<OCIE0); // enable TIM0_COMP interrupt
  bc:	89 b7       	in	r24, 0x39	; 57
  be:	82 60       	ori	r24, 0x02	; 2
  c0:	89 bf       	out	0x39, r24	; 57
	// TCCR2 = (1<<CS22)|(1<<CS21); // presc val. 1024
	// OCR2 = cMaxCnt2; // max tim/cnt2 value

	// UART init
	initUART();
  c2:	0e 94 49 00 	call	0x92	; 0x92 <initUART>

	sei();
  c6:	78 94       	sei
  c8:	ff cf       	rjmp	.-2      	; 0xc8 <main+0x20>

000000ca <__vector_19>:


ISR(TIMER0_COMP_vect, ISR_NAKED)
{
	// save SREG
	uint8_t save_sreg = SREG;
  ca:	cf b7       	in	r28, 0x3f	; 63

	uint8_t cnt_progress = 0; // store the number of unsolved clues

	for (uint8_t r = 0; r < 9; ++r)
  cc:	30 e0       	ldi	r19, 0x00	; 0
ISR(TIMER0_COMP_vect, ISR_NAKED)
{
	// save SREG
	uint8_t save_sreg = SREG;

	uint8_t cnt_progress = 0; // store the number of unsolved clues
  ce:	60 e0       	ldi	r22, 0x00	; 0

	for (uint8_t r = 0; r < 9; ++r)
  d0:	18 c0       	rjmp	.+48     	; 0x102 <__vector_19+0x38>
	{
		for (uint8_t c = 0; c < 9; ++c)
		{
			if (sudoku[r][c] != 0)
  d2:	83 2f       	mov	r24, r19
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	fc 01       	movw	r30, r24
  d8:	ee 0f       	add	r30, r30
  da:	ff 1f       	adc	r31, r31
  dc:	ee 0f       	add	r30, r30
  de:	ff 1f       	adc	r31, r31
  e0:	ee 0f       	add	r30, r30
  e2:	ff 1f       	adc	r31, r31
  e4:	e8 0f       	add	r30, r24
  e6:	f9 1f       	adc	r31, r25
  e8:	e0 5a       	subi	r30, 0xA0	; 160
  ea:	ff 4f       	sbci	r31, 0xFF	; 255
  ec:	e2 0f       	add	r30, r18
  ee:	f1 1d       	adc	r31, r1
  f0:	80 81       	ld	r24, Z
  f2:	81 11       	cpse	r24, r1
				cnt_progress++;
  f4:	6f 5f       	subi	r22, 0xFF	; 255

	uint8_t cnt_progress = 0; // store the number of unsolved clues

	for (uint8_t r = 0; r < 9; ++r)
	{
		for (uint8_t c = 0; c < 9; ++c)
  f6:	2f 5f       	subi	r18, 0xFF	; 255
  f8:	01 c0       	rjmp	.+2      	; 0xfc <__vector_19+0x32>
  fa:	20 e0       	ldi	r18, 0x00	; 0
  fc:	29 30       	cpi	r18, 0x09	; 9
  fe:	48 f3       	brcs	.-46     	; 0xd2 <__vector_19+0x8>
	// save SREG
	uint8_t save_sreg = SREG;

	uint8_t cnt_progress = 0; // store the number of unsolved clues

	for (uint8_t r = 0; r < 9; ++r)
 100:	3f 5f       	subi	r19, 0xFF	; 255
 102:	39 30       	cpi	r19, 0x09	; 9
 104:	d0 f3       	brcs	.-12     	; 0xfa <__vector_19+0x30>
			if (sudoku[r][c] != 0)
				cnt_progress++;
		}
	}

	cnt_progress = 0.1 * cnt_progress; // cnt_progress / 10
 106:	70 e0       	ldi	r23, 0x00	; 0
 108:	80 e0       	ldi	r24, 0x00	; 0
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	0e 94 ff 01 	call	0x3fe	; 0x3fe <__floatsisf>
 110:	2d ec       	ldi	r18, 0xCD	; 205
 112:	3c ec       	ldi	r19, 0xCC	; 204
 114:	4c ec       	ldi	r20, 0xCC	; 204
 116:	5d e3       	ldi	r21, 0x3D	; 61
 118:	0e 94 63 02 	call	0x4c6	; 0x4c6 <__mulsf3>
 11c:	0e 94 ce 01 	call	0x39c	; 0x39c <__fixunssfsi>
	// Refresh screen
	// if LEDs are off and cnt_progress sudoku has completed more than 10 clues
	if (pLedOut == 0xFF && cnt_progress >= 1) {
 120:	8b b3       	in	r24, 0x1b	; 27
 122:	8f 3f       	cpi	r24, 0xFF	; 255
 124:	61 f4       	brne	.+24     	; 0x13e <__vector_19+0x74>
 126:	66 23       	and	r22, r22
 128:	51 f0       	breq	.+20     	; 0x13e <__vector_19+0x74>
		pLedOut = (0xFF << cnt_progress);
 12a:	8f ef       	ldi	r24, 0xFF	; 255
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	06 2e       	mov	r0, r22
 130:	02 c0       	rjmp	.+4      	; 0x136 <__vector_19+0x6c>
 132:	88 0f       	add	r24, r24
 134:	99 1f       	adc	r25, r25
 136:	0a 94       	dec	r0
 138:	e2 f7       	brpl	.-8      	; 0x132 <__vector_19+0x68>
 13a:	8b bb       	out	0x1b, r24	; 27
 13c:	02 c0       	rjmp	.+4      	; 0x142 <__vector_19+0x78>
	}
	// LEDs were on, so now need to be off
	// or less than 10% is completed.
	else {
		pLedOut = 0xFF;
 13e:	8f ef       	ldi	r24, 0xFF	; 255
 140:	8b bb       	out	0x1b, r24	; 27
	}
	// reset TCNT0
	TCNT0 = 0;
 142:	12 be       	out	0x32, r1	; 50
	// restore SREG
	SREG = save_sreg;
 144:	cf bf       	out	0x3f, r28	; 63
	// return from interrupt
	reti();
 146:	18 95       	reti

00000148 <__vector_3>:
}

ISR(TIMER2_COMP_vect, ISR_NAKED)
{
	// save SREG
	uint8_t save_sreg = SREG;
 148:	9f b7       	in	r25, 0x3f	; 63

	// common response.
	uint8_t tx_OK[4] = {0x4F,0x4B,0x0D,0x0A};

	switch (rcv_buff[rcv_cons])
 14a:	e0 91 b4 00 	lds	r30, 0x00B4	; 0x8000b4 <rcv_cons>
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	ea 54       	subi	r30, 0x4A	; 74
 152:	ff 4f       	sbci	r31, 0xFF	; 255
 154:	80 81       	ld	r24, Z
 156:	8e 34       	cpi	r24, 0x4E	; 78
 158:	09 f4       	brne	.+2      	; 0x15c <__vector_3+0x14>
 15a:	5a c0       	rjmp	.+180    	; 0x210 <__EEPROM_REGION_LENGTH__+0x10>
 15c:	18 f4       	brcc	.+6      	; 0x164 <__vector_3+0x1c>
 15e:	81 34       	cpi	r24, 0x41	; 65
 160:	41 f0       	breq	.+16     	; 0x172 <__vector_3+0x2a>
 162:	db c0       	rjmp	.+438    	; 0x31a <__EEPROM_REGION_LENGTH__+0x11a>
 164:	8f 34       	cpi	r24, 0x4F	; 79
 166:	09 f4       	brne	.+2      	; 0x16a <__vector_3+0x22>
 168:	e3 c0       	rjmp	.+454    	; 0x330 <__EEPROM_REGION_LENGTH__+0x130>
 16a:	83 35       	cpi	r24, 0x53	; 83
 16c:	09 f4       	brne	.+2      	; 0x170 <__vector_3+0x28>
 16e:	e0 c0       	rjmp	.+448    	; 0x330 <__EEPROM_REGION_LENGTH__+0x130>
 170:	d4 c0       	rjmp	.+424    	; 0x31a <__EEPROM_REGION_LENGTH__+0x11a>
	{
	case 0x41: // 'A', "AT\r\n", which just returns OK
		// uint8_t cmd[3] = {0x54,0x0D,0x0A}; // char cmd[3] = "T\r\n";
		// cmd bytes are hardcoded because, there can't be a var
		// definition inside a case. Maybe global or PROGMEM string?
		if (rcv_buff[rcv_cons+1] == 0x54 &&
 172:	e0 91 b4 00 	lds	r30, 0x00B4	; 0x8000b4 <rcv_cons>
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	e9 54       	subi	r30, 0x49	; 73
 17a:	ff 4f       	sbci	r31, 0xFF	; 255
 17c:	80 81       	ld	r24, Z
 17e:	84 35       	cpi	r24, 0x54	; 84
 180:	d9 f5       	brne	.+118    	; 0x1f8 <__vector_3+0xb0>
			rcv_buff[rcv_cons+2] == 0x0D &&
 182:	e0 91 b4 00 	lds	r30, 0x00B4	; 0x8000b4 <rcv_cons>
 186:	f0 e0       	ldi	r31, 0x00	; 0
 188:	e8 54       	subi	r30, 0x48	; 72
 18a:	ff 4f       	sbci	r31, 0xFF	; 255
 18c:	80 81       	ld	r24, Z
	{
	case 0x41: // 'A', "AT\r\n", which just returns OK
		// uint8_t cmd[3] = {0x54,0x0D,0x0A}; // char cmd[3] = "T\r\n";
		// cmd bytes are hardcoded because, there can't be a var
		// definition inside a case. Maybe global or PROGMEM string?
		if (rcv_buff[rcv_cons+1] == 0x54 &&
 18e:	8d 30       	cpi	r24, 0x0D	; 13
 190:	99 f5       	brne	.+102    	; 0x1f8 <__vector_3+0xb0>
			rcv_buff[rcv_cons+2] == 0x0D &&
			rcv_buff[rcv_cons+3] == 0x0A)
 192:	e0 91 b4 00 	lds	r30, 0x00B4	; 0x8000b4 <rcv_cons>
 196:	f0 e0       	ldi	r31, 0x00	; 0
 198:	e7 54       	subi	r30, 0x47	; 71
 19a:	ff 4f       	sbci	r31, 0xFF	; 255
 19c:	80 81       	ld	r24, Z
	case 0x41: // 'A', "AT\r\n", which just returns OK
		// uint8_t cmd[3] = {0x54,0x0D,0x0A}; // char cmd[3] = "T\r\n";
		// cmd bytes are hardcoded because, there can't be a var
		// definition inside a case. Maybe global or PROGMEM string?
		if (rcv_buff[rcv_cons+1] == 0x54 &&
			rcv_buff[rcv_cons+2] == 0x0D &&
 19e:	8a 30       	cpi	r24, 0x0A	; 10
 1a0:	59 f5       	brne	.+86     	; 0x1f8 <__vector_3+0xb0>
			rcv_buff[rcv_cons+3] == 0x0A)
		{	// Update rcv consumer.
			rcv_cons = rcv_cons + 4;
 1a2:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <rcv_cons>
 1a6:	8c 5f       	subi	r24, 0xFC	; 252
 1a8:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <rcv_cons>
			// respond with "OK\CR\LF"
			transm_buff[transm_prod] = tx_OK[0];
 1ac:	e0 91 b2 00 	lds	r30, 0x00B2	; 0x8000b2 <__data_end>
 1b0:	f0 e0       	ldi	r31, 0x00	; 0
 1b2:	ea 54       	subi	r30, 0x4A	; 74
 1b4:	fe 4f       	sbci	r31, 0xFE	; 254
 1b6:	8f e4       	ldi	r24, 0x4F	; 79
 1b8:	80 83       	st	Z, r24
			transm_buff[++transm_prod] = tx_OK[1];
 1ba:	e0 91 b2 00 	lds	r30, 0x00B2	; 0x8000b2 <__data_end>
 1be:	ef 5f       	subi	r30, 0xFF	; 255
 1c0:	e0 93 b2 00 	sts	0x00B2, r30	; 0x8000b2 <__data_end>
 1c4:	f0 e0       	ldi	r31, 0x00	; 0
 1c6:	ea 54       	subi	r30, 0x4A	; 74
 1c8:	fe 4f       	sbci	r31, 0xFE	; 254
 1ca:	8b e4       	ldi	r24, 0x4B	; 75
 1cc:	80 83       	st	Z, r24
			transm_buff[++transm_prod] = tx_OK[2];
 1ce:	e0 91 b2 00 	lds	r30, 0x00B2	; 0x8000b2 <__data_end>
 1d2:	ef 5f       	subi	r30, 0xFF	; 255
 1d4:	e0 93 b2 00 	sts	0x00B2, r30	; 0x8000b2 <__data_end>
 1d8:	f0 e0       	ldi	r31, 0x00	; 0
 1da:	ea 54       	subi	r30, 0x4A	; 74
 1dc:	fe 4f       	sbci	r31, 0xFE	; 254
 1de:	8d e0       	ldi	r24, 0x0D	; 13
 1e0:	80 83       	st	Z, r24
			transm_buff[++transm_prod] = tx_OK[3];
 1e2:	e0 91 b2 00 	lds	r30, 0x00B2	; 0x8000b2 <__data_end>
 1e6:	ef 5f       	subi	r30, 0xFF	; 255
 1e8:	e0 93 b2 00 	sts	0x00B2, r30	; 0x8000b2 <__data_end>
 1ec:	f0 e0       	ldi	r31, 0x00	; 0
 1ee:	ea 54       	subi	r30, 0x4A	; 74
 1f0:	fe 4f       	sbci	r31, 0xFE	; 254
 1f2:	8a e0       	ldi	r24, 0x0A	; 10
 1f4:	80 83       	st	Z, r24
 1f6:	9c c0       	rjmp	.+312    	; 0x330 <__EEPROM_REGION_LENGTH__+0x130>
		} else {
			// Eat everything until an '\LF' is found because the cmd
			// is not correct.
			do { } while ( rcv_buff[++rcv_cons] != 0x4A );
 1f8:	e0 91 b4 00 	lds	r30, 0x00B4	; 0x8000b4 <rcv_cons>
 1fc:	ef 5f       	subi	r30, 0xFF	; 255
 1fe:	e0 93 b4 00 	sts	0x00B4, r30	; 0x8000b4 <rcv_cons>
 202:	f0 e0       	ldi	r31, 0x00	; 0
 204:	ea 54       	subi	r30, 0x4A	; 74
 206:	ff 4f       	sbci	r31, 0xFF	; 255
 208:	80 81       	ld	r24, Z
 20a:	8a 34       	cpi	r24, 0x4A	; 74
 20c:	a9 f7       	brne	.-22     	; 0x1f8 <__vector_3+0xb0>
 20e:	90 c0       	rjmp	.+288    	; 0x330 <__EEPROM_REGION_LENGTH__+0x130>
		}
		// work is done
		break;
	
	case 0x4E: // 'N', "N<x><y><val>\r\n", which stores a clue and returns OK
		if (rcv_buff[rcv_cons] == 0x54 &&
 210:	e0 91 b4 00 	lds	r30, 0x00B4	; 0x8000b4 <rcv_cons>
 214:	f0 e0       	ldi	r31, 0x00	; 0
 216:	ea 54       	subi	r30, 0x4A	; 74
 218:	ff 4f       	sbci	r31, 0xFF	; 255
 21a:	80 81       	ld	r24, Z
 21c:	84 35       	cpi	r24, 0x54	; 84
 21e:	09 f0       	breq	.+2      	; 0x222 <__EEPROM_REGION_LENGTH__+0x22>
 220:	70 c0       	rjmp	.+224    	; 0x302 <__EEPROM_REGION_LENGTH__+0x102>
			rcv_buff[rcv_cons+4] == 0x0D &&
 222:	e0 91 b4 00 	lds	r30, 0x00B4	; 0x8000b4 <rcv_cons>
 226:	f0 e0       	ldi	r31, 0x00	; 0
 228:	e6 54       	subi	r30, 0x46	; 70
 22a:	ff 4f       	sbci	r31, 0xFF	; 255
 22c:	80 81       	ld	r24, Z
		}
		// work is done
		break;
	
	case 0x4E: // 'N', "N<x><y><val>\r\n", which stores a clue and returns OK
		if (rcv_buff[rcv_cons] == 0x54 &&
 22e:	8d 30       	cpi	r24, 0x0D	; 13
 230:	09 f0       	breq	.+2      	; 0x234 <__EEPROM_REGION_LENGTH__+0x34>
 232:	67 c0       	rjmp	.+206    	; 0x302 <__EEPROM_REGION_LENGTH__+0x102>
			rcv_buff[rcv_cons+4] == 0x0D &&
			rcv_buff[rcv_cons+5] == 0x0A)
 234:	e0 91 b4 00 	lds	r30, 0x00B4	; 0x8000b4 <rcv_cons>
 238:	f0 e0       	ldi	r31, 0x00	; 0
 23a:	e5 54       	subi	r30, 0x45	; 69
 23c:	ff 4f       	sbci	r31, 0xFF	; 255
 23e:	80 81       	ld	r24, Z
		// work is done
		break;
	
	case 0x4E: // 'N', "N<x><y><val>\r\n", which stores a clue and returns OK
		if (rcv_buff[rcv_cons] == 0x54 &&
			rcv_buff[rcv_cons+4] == 0x0D &&
 240:	8a 30       	cpi	r24, 0x0A	; 10
 242:	09 f0       	breq	.+2      	; 0x246 <__EEPROM_REGION_LENGTH__+0x46>
 244:	5e c0       	rjmp	.+188    	; 0x302 <__EEPROM_REGION_LENGTH__+0x102>
			rcv_buff[rcv_cons+5] == 0x0A)
		{
			// array indices are from 0-8, but the cmd indices are from 0x31-0x39
			// use of postfix is necessary because rcv_cons++ will return 
			// rcv_buff[rcv_cons] and then increment rcv_cons.
			uint8_t i = rcv_buff[((++rcv_cons) & 0x0F)-0x31];
 246:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <rcv_cons>
 24a:	8f 5f       	subi	r24, 0xFF	; 255
 24c:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <rcv_cons>
 250:	e8 2f       	mov	r30, r24
 252:	ef 70       	andi	r30, 0x0F	; 15
 254:	f0 e0       	ldi	r31, 0x00	; 0
 256:	eb 57       	subi	r30, 0x7B	; 123
 258:	ff 4f       	sbci	r31, 0xFF	; 255
 25a:	20 81       	ld	r18, Z
			uint8_t j = rcv_buff[((++rcv_cons) & 0x0F)-0x31];
 25c:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <rcv_cons>
 260:	8f 5f       	subi	r24, 0xFF	; 255
 262:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <rcv_cons>
 266:	e8 2f       	mov	r30, r24
 268:	ef 70       	andi	r30, 0x0F	; 15
 26a:	f0 e0       	ldi	r31, 0x00	; 0
 26c:	eb 57       	subi	r30, 0x7B	; 123
 26e:	ff 4f       	sbci	r31, 0xFF	; 255
 270:	40 81       	ld	r20, Z
			sudoku[i][j] = (rcv_buff[++rcv_cons] & 0x0F)-0x30;
 272:	30 e0       	ldi	r19, 0x00	; 0
 274:	e0 91 b4 00 	lds	r30, 0x00B4	; 0x8000b4 <rcv_cons>
 278:	ef 5f       	subi	r30, 0xFF	; 255
 27a:	e0 93 b4 00 	sts	0x00B4, r30	; 0x8000b4 <rcv_cons>
 27e:	f0 e0       	ldi	r31, 0x00	; 0
 280:	ea 54       	subi	r30, 0x4A	; 74
 282:	ff 4f       	sbci	r31, 0xFF	; 255
 284:	80 81       	ld	r24, Z
 286:	8f 70       	andi	r24, 0x0F	; 15
 288:	80 53       	subi	r24, 0x30	; 48
 28a:	f9 01       	movw	r30, r18
 28c:	ee 0f       	add	r30, r30
 28e:	ff 1f       	adc	r31, r31
 290:	ee 0f       	add	r30, r30
 292:	ff 1f       	adc	r31, r31
 294:	ee 0f       	add	r30, r30
 296:	ff 1f       	adc	r31, r31
 298:	e2 0f       	add	r30, r18
 29a:	f3 1f       	adc	r31, r19
 29c:	e0 5a       	subi	r30, 0xA0	; 160
 29e:	ff 4f       	sbci	r31, 0xFF	; 255
 2a0:	e4 0f       	add	r30, r20
 2a2:	f1 1d       	adc	r31, r1
 2a4:	80 83       	st	Z, r24
			// Update rcv consumer.
			rcv_cons = rcv_cons + 2;
 2a6:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <rcv_cons>
 2aa:	8e 5f       	subi	r24, 0xFE	; 254
 2ac:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <rcv_cons>
			// respond with "OK\CR\LF"
			transm_buff[transm_prod] = tx_OK[0];
 2b0:	e0 91 b2 00 	lds	r30, 0x00B2	; 0x8000b2 <__data_end>
 2b4:	f0 e0       	ldi	r31, 0x00	; 0
 2b6:	ea 54       	subi	r30, 0x4A	; 74
 2b8:	fe 4f       	sbci	r31, 0xFE	; 254
 2ba:	8f e4       	ldi	r24, 0x4F	; 79
 2bc:	80 83       	st	Z, r24
			transm_buff[transm_prod++] = tx_OK[1];
 2be:	e0 91 b2 00 	lds	r30, 0x00B2	; 0x8000b2 <__data_end>
 2c2:	81 e0       	ldi	r24, 0x01	; 1
 2c4:	8e 0f       	add	r24, r30
 2c6:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__data_end>
 2ca:	f0 e0       	ldi	r31, 0x00	; 0
 2cc:	ea 54       	subi	r30, 0x4A	; 74
 2ce:	fe 4f       	sbci	r31, 0xFE	; 254
 2d0:	8b e4       	ldi	r24, 0x4B	; 75
 2d2:	80 83       	st	Z, r24
			transm_buff[transm_prod++] = tx_OK[2];
 2d4:	e0 91 b2 00 	lds	r30, 0x00B2	; 0x8000b2 <__data_end>
 2d8:	81 e0       	ldi	r24, 0x01	; 1
 2da:	8e 0f       	add	r24, r30
 2dc:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__data_end>
 2e0:	f0 e0       	ldi	r31, 0x00	; 0
 2e2:	ea 54       	subi	r30, 0x4A	; 74
 2e4:	fe 4f       	sbci	r31, 0xFE	; 254
 2e6:	8d e0       	ldi	r24, 0x0D	; 13
 2e8:	80 83       	st	Z, r24
			transm_buff[transm_prod++] = tx_OK[3];
 2ea:	e0 91 b2 00 	lds	r30, 0x00B2	; 0x8000b2 <__data_end>
 2ee:	81 e0       	ldi	r24, 0x01	; 1
 2f0:	8e 0f       	add	r24, r30
 2f2:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__data_end>
 2f6:	f0 e0       	ldi	r31, 0x00	; 0
 2f8:	ea 54       	subi	r30, 0x4A	; 74
 2fa:	fe 4f       	sbci	r31, 0xFE	; 254
 2fc:	8a e0       	ldi	r24, 0x0A	; 10
 2fe:	80 83       	st	Z, r24
	
	case 0x4E: // 'N', "N<x><y><val>\r\n", which stores a clue and returns OK
		if (rcv_buff[rcv_cons] == 0x54 &&
			rcv_buff[rcv_cons+4] == 0x0D &&
			rcv_buff[rcv_cons+5] == 0x0A)
		{
 300:	17 c0       	rjmp	.+46     	; 0x330 <__EEPROM_REGION_LENGTH__+0x130>
			transm_buff[transm_prod++] = tx_OK[2];
			transm_buff[transm_prod++] = tx_OK[3];
		} else {
		// Eat everything until an '\LF' is found because the cmd
		// is not correct.
		do { } while ( rcv_buff[++rcv_cons] != 0x4A );
 302:	e0 91 b4 00 	lds	r30, 0x00B4	; 0x8000b4 <rcv_cons>
 306:	ef 5f       	subi	r30, 0xFF	; 255
 308:	e0 93 b4 00 	sts	0x00B4, r30	; 0x8000b4 <rcv_cons>
 30c:	f0 e0       	ldi	r31, 0x00	; 0
 30e:	ea 54       	subi	r30, 0x4A	; 74
 310:	ff 4f       	sbci	r31, 0xFF	; 255
 312:	80 81       	ld	r24, Z
 314:	8a 34       	cpi	r24, 0x4A	; 74
 316:	a9 f7       	brne	.-22     	; 0x302 <__EEPROM_REGION_LENGTH__+0x102>
 318:	0b c0       	rjmp	.+22     	; 0x330 <__EEPROM_REGION_LENGTH__+0x130>
		
	case 0x4F: // 'O', "OK\r\n"
		break;
		
	default: // no matching cmd, eat bytes
		do { } while ( rcv_buff[++rcv_cons] != 0x4A );
 31a:	e0 91 b4 00 	lds	r30, 0x00B4	; 0x8000b4 <rcv_cons>
 31e:	ef 5f       	subi	r30, 0xFF	; 255
 320:	e0 93 b4 00 	sts	0x00B4, r30	; 0x8000b4 <rcv_cons>
 324:	f0 e0       	ldi	r31, 0x00	; 0
 326:	ea 54       	subi	r30, 0x4A	; 74
 328:	ff 4f       	sbci	r31, 0xFF	; 255
 32a:	80 81       	ld	r24, Z
 32c:	8a 34       	cpi	r24, 0x4A	; 74
 32e:	a9 f7       	brne	.-22     	; 0x31a <__EEPROM_REGION_LENGTH__+0x11a>
		break;
	}
	
	
	SREG = save_sreg;
 330:	9f bf       	out	0x3f, r25	; 63
	// return from interrupt
	reti();
 332:	18 95       	reti

00000334 <__vector_11>:
}

ISR(USART_RXC_vect, ISR_NAKED)
{
	uint8_t save_sreg = SREG;
 334:	2f b7       	in	r18, 0x3f	; 63

	// If BUFSZ is reached we have to process some data before we receive new.
	// So reti and possibly trigger the process intrpt.
	if (rcv_prod - rcv_cons == BUFSZ)
 336:	80 91 b5 00 	lds	r24, 0x00B5	; 0x8000b5 <rcv_prod>
 33a:	30 91 b4 00 	lds	r19, 0x00B4	; 0x8000b4 <rcv_cons>
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	83 1b       	sub	r24, r19
 342:	91 09       	sbc	r25, r1
 344:	81 15       	cp	r24, r1
 346:	31 e0       	ldi	r19, 0x01	; 1
 348:	93 07       	cpc	r25, r19
 34a:	61 f0       	breq	.+24     	; 0x364 <__vector_11+0x30>
		goto USART_RXC_vect_RETI;

	rcv_buff[rcv_prod%BUFSZ] = UDR;
 34c:	e0 91 b5 00 	lds	r30, 0x00B5	; 0x8000b5 <rcv_prod>
 350:	f0 e0       	ldi	r31, 0x00	; 0
 352:	8c b1       	in	r24, 0x0c	; 12
 354:	ea 54       	subi	r30, 0x4A	; 74
 356:	ff 4f       	sbci	r31, 0xFF	; 255
 358:	80 83       	st	Z, r24
	++rcv_prod;
 35a:	80 91 b5 00 	lds	r24, 0x00B5	; 0x8000b5 <rcv_prod>
 35e:	8f 5f       	subi	r24, 0xFF	; 255
 360:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <rcv_prod>

USART_RXC_vect_RETI:
	SREG = save_sreg;
 364:	2f bf       	out	0x3f, r18	; 63

	reti();
 366:	18 95       	reti

00000368 <__vector_13>:
}


ISR(USART_TXC_vect, ISR_NAKED)
{
	uint8_t save_sreg = SREG; // Storing the value of status register
 368:	2f b7       	in	r18, 0x3f	; 63

	if(transm_cons == 0)
 36a:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <transm_cons>
 36e:	88 23       	and	r24, r24
 370:	99 f0       	breq	.+38     	; 0x398 <__vector_13+0x30>
		goto USART_TXC_vector_RETI;

	UDR  = transm_buff[transm_cons]; // Sending character as a response
 372:	e0 91 b3 00 	lds	r30, 0x00B3	; 0x8000b3 <transm_cons>
 376:	f0 e0       	ldi	r31, 0x00	; 0
 378:	ea 54       	subi	r30, 0x4A	; 74
 37a:	fe 4f       	sbci	r31, 0xFE	; 254
 37c:	80 81       	ld	r24, Z
 37e:	8c b9       	out	0x0c, r24	; 12

	transm_cons = (transm_cons+1)%BUFSZ; // Increasing the position of pointer in buffer transm_buffer
 380:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <transm_cons>
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	01 96       	adiw	r24, 0x01	; 1
 388:	90 78       	andi	r25, 0x80	; 128
 38a:	99 23       	and	r25, r25
 38c:	1c f4       	brge	.+6      	; 0x394 <__vector_13+0x2c>
 38e:	01 97       	sbiw	r24, 0x01	; 1
 390:	9f 6f       	ori	r25, 0xFF	; 255
 392:	01 96       	adiw	r24, 0x01	; 1
 394:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <transm_cons>
	
USART_TXC_vector_RETI:

	SREG = save_sreg; // Loading the value of status register
 398:	2f bf       	out	0x3f, r18	; 63

	reti();
 39a:	18 95       	reti

0000039c <__fixunssfsi>:
 39c:	0e 94 42 02 	call	0x484	; 0x484 <__fp_splitA>
 3a0:	88 f0       	brcs	.+34     	; 0x3c4 <__fixunssfsi+0x28>
 3a2:	9f 57       	subi	r25, 0x7F	; 127
 3a4:	98 f0       	brcs	.+38     	; 0x3cc <__fixunssfsi+0x30>
 3a6:	b9 2f       	mov	r27, r25
 3a8:	99 27       	eor	r25, r25
 3aa:	b7 51       	subi	r27, 0x17	; 23
 3ac:	b0 f0       	brcs	.+44     	; 0x3da <__fixunssfsi+0x3e>
 3ae:	e1 f0       	breq	.+56     	; 0x3e8 <__fixunssfsi+0x4c>
 3b0:	66 0f       	add	r22, r22
 3b2:	77 1f       	adc	r23, r23
 3b4:	88 1f       	adc	r24, r24
 3b6:	99 1f       	adc	r25, r25
 3b8:	1a f0       	brmi	.+6      	; 0x3c0 <__fixunssfsi+0x24>
 3ba:	ba 95       	dec	r27
 3bc:	c9 f7       	brne	.-14     	; 0x3b0 <__fixunssfsi+0x14>
 3be:	14 c0       	rjmp	.+40     	; 0x3e8 <__fixunssfsi+0x4c>
 3c0:	b1 30       	cpi	r27, 0x01	; 1
 3c2:	91 f0       	breq	.+36     	; 0x3e8 <__fixunssfsi+0x4c>
 3c4:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <__fp_zero>
 3c8:	b1 e0       	ldi	r27, 0x01	; 1
 3ca:	08 95       	ret
 3cc:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <__fp_zero>
 3d0:	67 2f       	mov	r22, r23
 3d2:	78 2f       	mov	r23, r24
 3d4:	88 27       	eor	r24, r24
 3d6:	b8 5f       	subi	r27, 0xF8	; 248
 3d8:	39 f0       	breq	.+14     	; 0x3e8 <__fixunssfsi+0x4c>
 3da:	b9 3f       	cpi	r27, 0xF9	; 249
 3dc:	cc f3       	brlt	.-14     	; 0x3d0 <__fixunssfsi+0x34>
 3de:	86 95       	lsr	r24
 3e0:	77 95       	ror	r23
 3e2:	67 95       	ror	r22
 3e4:	b3 95       	inc	r27
 3e6:	d9 f7       	brne	.-10     	; 0x3de <__fixunssfsi+0x42>
 3e8:	3e f4       	brtc	.+14     	; 0x3f8 <__fixunssfsi+0x5c>
 3ea:	90 95       	com	r25
 3ec:	80 95       	com	r24
 3ee:	70 95       	com	r23
 3f0:	61 95       	neg	r22
 3f2:	7f 4f       	sbci	r23, 0xFF	; 255
 3f4:	8f 4f       	sbci	r24, 0xFF	; 255
 3f6:	9f 4f       	sbci	r25, 0xFF	; 255
 3f8:	08 95       	ret

000003fa <__floatunsisf>:
 3fa:	e8 94       	clt
 3fc:	09 c0       	rjmp	.+18     	; 0x410 <__DATA_REGION_LENGTH__+0x10>

000003fe <__floatsisf>:
 3fe:	97 fb       	bst	r25, 7
 400:	3e f4       	brtc	.+14     	; 0x410 <__DATA_REGION_LENGTH__+0x10>
 402:	90 95       	com	r25
 404:	80 95       	com	r24
 406:	70 95       	com	r23
 408:	61 95       	neg	r22
 40a:	7f 4f       	sbci	r23, 0xFF	; 255
 40c:	8f 4f       	sbci	r24, 0xFF	; 255
 40e:	9f 4f       	sbci	r25, 0xFF	; 255
 410:	99 23       	and	r25, r25
 412:	a9 f0       	breq	.+42     	; 0x43e <__DATA_REGION_LENGTH__+0x3e>
 414:	f9 2f       	mov	r31, r25
 416:	96 e9       	ldi	r25, 0x96	; 150
 418:	bb 27       	eor	r27, r27
 41a:	93 95       	inc	r25
 41c:	f6 95       	lsr	r31
 41e:	87 95       	ror	r24
 420:	77 95       	ror	r23
 422:	67 95       	ror	r22
 424:	b7 95       	ror	r27
 426:	f1 11       	cpse	r31, r1
 428:	f8 cf       	rjmp	.-16     	; 0x41a <__DATA_REGION_LENGTH__+0x1a>
 42a:	fa f4       	brpl	.+62     	; 0x46a <__stack+0xb>
 42c:	bb 0f       	add	r27, r27
 42e:	11 f4       	brne	.+4      	; 0x434 <__DATA_REGION_LENGTH__+0x34>
 430:	60 ff       	sbrs	r22, 0
 432:	1b c0       	rjmp	.+54     	; 0x46a <__stack+0xb>
 434:	6f 5f       	subi	r22, 0xFF	; 255
 436:	7f 4f       	sbci	r23, 0xFF	; 255
 438:	8f 4f       	sbci	r24, 0xFF	; 255
 43a:	9f 4f       	sbci	r25, 0xFF	; 255
 43c:	16 c0       	rjmp	.+44     	; 0x46a <__stack+0xb>
 43e:	88 23       	and	r24, r24
 440:	11 f0       	breq	.+4      	; 0x446 <__DATA_REGION_LENGTH__+0x46>
 442:	96 e9       	ldi	r25, 0x96	; 150
 444:	11 c0       	rjmp	.+34     	; 0x468 <__stack+0x9>
 446:	77 23       	and	r23, r23
 448:	21 f0       	breq	.+8      	; 0x452 <__DATA_REGION_LENGTH__+0x52>
 44a:	9e e8       	ldi	r25, 0x8E	; 142
 44c:	87 2f       	mov	r24, r23
 44e:	76 2f       	mov	r23, r22
 450:	05 c0       	rjmp	.+10     	; 0x45c <__DATA_REGION_LENGTH__+0x5c>
 452:	66 23       	and	r22, r22
 454:	71 f0       	breq	.+28     	; 0x472 <__stack+0x13>
 456:	96 e8       	ldi	r25, 0x86	; 134
 458:	86 2f       	mov	r24, r22
 45a:	70 e0       	ldi	r23, 0x00	; 0
 45c:	60 e0       	ldi	r22, 0x00	; 0
 45e:	2a f0       	brmi	.+10     	; 0x46a <__stack+0xb>
 460:	9a 95       	dec	r25
 462:	66 0f       	add	r22, r22
 464:	77 1f       	adc	r23, r23
 466:	88 1f       	adc	r24, r24
 468:	da f7       	brpl	.-10     	; 0x460 <__stack+0x1>
 46a:	88 0f       	add	r24, r24
 46c:	96 95       	lsr	r25
 46e:	87 95       	ror	r24
 470:	97 f9       	bld	r25, 7
 472:	08 95       	ret

00000474 <__fp_split3>:
 474:	57 fd       	sbrc	r21, 7
 476:	90 58       	subi	r25, 0x80	; 128
 478:	44 0f       	add	r20, r20
 47a:	55 1f       	adc	r21, r21
 47c:	59 f0       	breq	.+22     	; 0x494 <__fp_splitA+0x10>
 47e:	5f 3f       	cpi	r21, 0xFF	; 255
 480:	71 f0       	breq	.+28     	; 0x49e <__fp_splitA+0x1a>
 482:	47 95       	ror	r20

00000484 <__fp_splitA>:
 484:	88 0f       	add	r24, r24
 486:	97 fb       	bst	r25, 7
 488:	99 1f       	adc	r25, r25
 48a:	61 f0       	breq	.+24     	; 0x4a4 <__fp_splitA+0x20>
 48c:	9f 3f       	cpi	r25, 0xFF	; 255
 48e:	79 f0       	breq	.+30     	; 0x4ae <__fp_splitA+0x2a>
 490:	87 95       	ror	r24
 492:	08 95       	ret
 494:	12 16       	cp	r1, r18
 496:	13 06       	cpc	r1, r19
 498:	14 06       	cpc	r1, r20
 49a:	55 1f       	adc	r21, r21
 49c:	f2 cf       	rjmp	.-28     	; 0x482 <__fp_split3+0xe>
 49e:	46 95       	lsr	r20
 4a0:	f1 df       	rcall	.-30     	; 0x484 <__fp_splitA>
 4a2:	08 c0       	rjmp	.+16     	; 0x4b4 <__fp_splitA+0x30>
 4a4:	16 16       	cp	r1, r22
 4a6:	17 06       	cpc	r1, r23
 4a8:	18 06       	cpc	r1, r24
 4aa:	99 1f       	adc	r25, r25
 4ac:	f1 cf       	rjmp	.-30     	; 0x490 <__fp_splitA+0xc>
 4ae:	86 95       	lsr	r24
 4b0:	71 05       	cpc	r23, r1
 4b2:	61 05       	cpc	r22, r1
 4b4:	08 94       	sec
 4b6:	08 95       	ret

000004b8 <__fp_zero>:
 4b8:	e8 94       	clt

000004ba <__fp_szero>:
 4ba:	bb 27       	eor	r27, r27
 4bc:	66 27       	eor	r22, r22
 4be:	77 27       	eor	r23, r23
 4c0:	cb 01       	movw	r24, r22
 4c2:	97 f9       	bld	r25, 7
 4c4:	08 95       	ret

000004c6 <__mulsf3>:
 4c6:	0e 94 76 02 	call	0x4ec	; 0x4ec <__mulsf3x>
 4ca:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__fp_round>
 4ce:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <__fp_pscA>
 4d2:	38 f0       	brcs	.+14     	; 0x4e2 <__mulsf3+0x1c>
 4d4:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <__fp_pscB>
 4d8:	20 f0       	brcs	.+8      	; 0x4e2 <__mulsf3+0x1c>
 4da:	95 23       	and	r25, r21
 4dc:	11 f0       	breq	.+4      	; 0x4e2 <__mulsf3+0x1c>
 4de:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__fp_inf>
 4e2:	0c 94 d6 02 	jmp	0x5ac	; 0x5ac <__fp_nan>
 4e6:	11 24       	eor	r1, r1
 4e8:	0c 94 5d 02 	jmp	0x4ba	; 0x4ba <__fp_szero>

000004ec <__mulsf3x>:
 4ec:	0e 94 3a 02 	call	0x474	; 0x474 <__fp_split3>
 4f0:	70 f3       	brcs	.-36     	; 0x4ce <__mulsf3+0x8>

000004f2 <__mulsf3_pse>:
 4f2:	95 9f       	mul	r25, r21
 4f4:	c1 f3       	breq	.-16     	; 0x4e6 <__mulsf3+0x20>
 4f6:	95 0f       	add	r25, r21
 4f8:	50 e0       	ldi	r21, 0x00	; 0
 4fa:	55 1f       	adc	r21, r21
 4fc:	62 9f       	mul	r22, r18
 4fe:	f0 01       	movw	r30, r0
 500:	72 9f       	mul	r23, r18
 502:	bb 27       	eor	r27, r27
 504:	f0 0d       	add	r31, r0
 506:	b1 1d       	adc	r27, r1
 508:	63 9f       	mul	r22, r19
 50a:	aa 27       	eor	r26, r26
 50c:	f0 0d       	add	r31, r0
 50e:	b1 1d       	adc	r27, r1
 510:	aa 1f       	adc	r26, r26
 512:	64 9f       	mul	r22, r20
 514:	66 27       	eor	r22, r22
 516:	b0 0d       	add	r27, r0
 518:	a1 1d       	adc	r26, r1
 51a:	66 1f       	adc	r22, r22
 51c:	82 9f       	mul	r24, r18
 51e:	22 27       	eor	r18, r18
 520:	b0 0d       	add	r27, r0
 522:	a1 1d       	adc	r26, r1
 524:	62 1f       	adc	r22, r18
 526:	73 9f       	mul	r23, r19
 528:	b0 0d       	add	r27, r0
 52a:	a1 1d       	adc	r26, r1
 52c:	62 1f       	adc	r22, r18
 52e:	83 9f       	mul	r24, r19
 530:	a0 0d       	add	r26, r0
 532:	61 1d       	adc	r22, r1
 534:	22 1f       	adc	r18, r18
 536:	74 9f       	mul	r23, r20
 538:	33 27       	eor	r19, r19
 53a:	a0 0d       	add	r26, r0
 53c:	61 1d       	adc	r22, r1
 53e:	23 1f       	adc	r18, r19
 540:	84 9f       	mul	r24, r20
 542:	60 0d       	add	r22, r0
 544:	21 1d       	adc	r18, r1
 546:	82 2f       	mov	r24, r18
 548:	76 2f       	mov	r23, r22
 54a:	6a 2f       	mov	r22, r26
 54c:	11 24       	eor	r1, r1
 54e:	9f 57       	subi	r25, 0x7F	; 127
 550:	50 40       	sbci	r21, 0x00	; 0
 552:	9a f0       	brmi	.+38     	; 0x57a <__mulsf3_pse+0x88>
 554:	f1 f0       	breq	.+60     	; 0x592 <__mulsf3_pse+0xa0>
 556:	88 23       	and	r24, r24
 558:	4a f0       	brmi	.+18     	; 0x56c <__mulsf3_pse+0x7a>
 55a:	ee 0f       	add	r30, r30
 55c:	ff 1f       	adc	r31, r31
 55e:	bb 1f       	adc	r27, r27
 560:	66 1f       	adc	r22, r22
 562:	77 1f       	adc	r23, r23
 564:	88 1f       	adc	r24, r24
 566:	91 50       	subi	r25, 0x01	; 1
 568:	50 40       	sbci	r21, 0x00	; 0
 56a:	a9 f7       	brne	.-22     	; 0x556 <__mulsf3_pse+0x64>
 56c:	9e 3f       	cpi	r25, 0xFE	; 254
 56e:	51 05       	cpc	r21, r1
 570:	80 f0       	brcs	.+32     	; 0x592 <__mulsf3_pse+0xa0>
 572:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__fp_inf>
 576:	0c 94 5d 02 	jmp	0x4ba	; 0x4ba <__fp_szero>
 57a:	5f 3f       	cpi	r21, 0xFF	; 255
 57c:	e4 f3       	brlt	.-8      	; 0x576 <__mulsf3_pse+0x84>
 57e:	98 3e       	cpi	r25, 0xE8	; 232
 580:	d4 f3       	brlt	.-12     	; 0x576 <__mulsf3_pse+0x84>
 582:	86 95       	lsr	r24
 584:	77 95       	ror	r23
 586:	67 95       	ror	r22
 588:	b7 95       	ror	r27
 58a:	f7 95       	ror	r31
 58c:	e7 95       	ror	r30
 58e:	9f 5f       	subi	r25, 0xFF	; 255
 590:	c1 f7       	brne	.-16     	; 0x582 <__mulsf3_pse+0x90>
 592:	fe 2b       	or	r31, r30
 594:	88 0f       	add	r24, r24
 596:	91 1d       	adc	r25, r1
 598:	96 95       	lsr	r25
 59a:	87 95       	ror	r24
 59c:	97 f9       	bld	r25, 7
 59e:	08 95       	ret

000005a0 <__fp_inf>:
 5a0:	97 f9       	bld	r25, 7
 5a2:	9f 67       	ori	r25, 0x7F	; 127
 5a4:	80 e8       	ldi	r24, 0x80	; 128
 5a6:	70 e0       	ldi	r23, 0x00	; 0
 5a8:	60 e0       	ldi	r22, 0x00	; 0
 5aa:	08 95       	ret

000005ac <__fp_nan>:
 5ac:	9f ef       	ldi	r25, 0xFF	; 255
 5ae:	80 ec       	ldi	r24, 0xC0	; 192
 5b0:	08 95       	ret

000005b2 <__fp_pscA>:
 5b2:	00 24       	eor	r0, r0
 5b4:	0a 94       	dec	r0
 5b6:	16 16       	cp	r1, r22
 5b8:	17 06       	cpc	r1, r23
 5ba:	18 06       	cpc	r1, r24
 5bc:	09 06       	cpc	r0, r25
 5be:	08 95       	ret

000005c0 <__fp_pscB>:
 5c0:	00 24       	eor	r0, r0
 5c2:	0a 94       	dec	r0
 5c4:	12 16       	cp	r1, r18
 5c6:	13 06       	cpc	r1, r19
 5c8:	14 06       	cpc	r1, r20
 5ca:	05 06       	cpc	r0, r21
 5cc:	08 95       	ret

000005ce <__fp_round>:
 5ce:	09 2e       	mov	r0, r25
 5d0:	03 94       	inc	r0
 5d2:	00 0c       	add	r0, r0
 5d4:	11 f4       	brne	.+4      	; 0x5da <__fp_round+0xc>
 5d6:	88 23       	and	r24, r24
 5d8:	52 f0       	brmi	.+20     	; 0x5ee <__fp_round+0x20>
 5da:	bb 0f       	add	r27, r27
 5dc:	40 f4       	brcc	.+16     	; 0x5ee <__fp_round+0x20>
 5de:	bf 2b       	or	r27, r31
 5e0:	11 f4       	brne	.+4      	; 0x5e6 <__fp_round+0x18>
 5e2:	60 ff       	sbrs	r22, 0
 5e4:	04 c0       	rjmp	.+8      	; 0x5ee <__fp_round+0x20>
 5e6:	6f 5f       	subi	r22, 0xFF	; 255
 5e8:	7f 4f       	sbci	r23, 0xFF	; 255
 5ea:	8f 4f       	sbci	r24, 0xFF	; 255
 5ec:	9f 4f       	sbci	r25, 0xFF	; 255
 5ee:	08 95       	ret

000005f0 <_exit>:
 5f0:	f8 94       	cli

000005f2 <__stop_program>:
 5f2:	ff cf       	rjmp	.-2      	; 0x5f2 <__stop_program>
